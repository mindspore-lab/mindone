import numpy as np

# layers
NORMALIZATION_CASES = [
    [
        "AdaLayerNormZero",
        "diffusers.models.normalization.AdaLayerNormZero",
        "mindone.diffusers.models.normalization.AdaLayerNormZero",
        (16, 8),
        {},
        (
            np.random.randn(3, 4, 16).astype(np.float32),
            np.random.randint(0, 8, size=(3,)),
            np.random.randint(0, 8, size=(3,)),
        ),
        {},
    ],
    [
        "AdaGroupNorm",
        "diffusers.models.normalization.AdaGroupNorm",
        "mindone.diffusers.models.normalization.AdaGroupNorm",
        (16, 12, 2),
        {},
        (
            np.random.randn(3, 12, 4, 4).astype(np.float32),
            np.random.randn(3, 16).astype(np.float32),
        ),
        {},
    ],
    [
        "AdaLayerNormContinuous",
        "diffusers.models.normalization.AdaLayerNormContinuous",
        "mindone.diffusers.models.normalization.AdaLayerNormContinuous",
        (16, 12),
        {},
        (
            np.random.randn(3, 4, 16).astype(np.float32),
            np.random.randn(3, 12).astype(np.float32),
        ),
        {},
    ],
    [
        "LayerNorm",
        "torch.nn.LayerNorm",
        "mindone.diffusers.models.normalization.LayerNorm",
        (16, 1e-5, False),
        {},
        (np.random.randn(3, 4, 16).astype(np.float32),),
        {},
    ],
    [
        "GroupNorm",
        "torch.nn.GroupNorm",
        "mindone.diffusers.models.normalization.GroupNorm",
        (4, 16),
        {},
        (np.random.randn(3, 16, 4, 4).astype(np.float32),),
        {},
    ],
    [
        "GlobalResponseNorm",
        "diffusers.models.normalization.GlobalResponseNorm",
        "mindone.diffusers.models.normalization.GlobalResponseNorm",
        (16,),
        {},
        (np.random.randn(3, 4, 4, 16).astype(np.float32),),
        {},
    ],
]


EMBEDDINGS_CASES = [
    [
        "PatchEmbed",
        "diffusers.models.embeddings.PatchEmbed",
        "mindone.diffusers.models.embeddings.PatchEmbed",
        (),
        {},
        (np.random.randn(3, 3, 224, 224).astype(np.float32),),
        {},
    ],
    [
        "Timesteps",
        "diffusers.models.embeddings.Timesteps",
        "mindone.diffusers.models.embeddings.Timesteps",
        (128, False, 1),
        {},
        (np.random.randint(0, 100, size=(3,)).astype(np.int32),),
        {},
    ],
    [
        "TimestepEmbedding",
        "diffusers.models.embeddings.TimestepEmbedding",
        "mindone.diffusers.models.embeddings.TimestepEmbedding",
        (16, 128),
        {},
        (np.random.randn(3, 16).astype(np.float32),),
        {},
    ],
    [
        "GaussianFourierProjection",
        "diffusers.models.embeddings.GaussianFourierProjection",
        "mindone.diffusers.models.embeddings.GaussianFourierProjection",
        (),
        {},
        (np.random.randint(1, 20, size=(3,)).astype(np.float32),),
        {},
    ],
    [
        "SinusoidalPositionalEmbedding",
        "diffusers.models.embeddings.SinusoidalPositionalEmbedding",
        "mindone.diffusers.models.embeddings.SinusoidalPositionalEmbedding",
        (128, 32),
        {},
        (np.random.randn(3, 16, 128).astype(np.float32),),
        {},
    ],
    [
        "ImagePositionalEmbeddings",
        "diffusers.models.embeddings.ImagePositionalEmbeddings",
        "mindone.diffusers.models.embeddings.ImagePositionalEmbeddings",
        (192, 16, 12, 128),
        {},
        (np.random.randint(0, 192, size=(3, 16)).astype(np.int32),),
        {},
    ],
    [
        "LabelEmbedding",
        "diffusers.models.embeddings.LabelEmbedding",
        "mindone.diffusers.models.embeddings.LabelEmbedding",
        (100, 128, 0.1),
        {},
        (np.random.randint(0, 100, size=(3, 16)).astype(np.int32),),
        {},
    ],
    [
        "TextImageProjection",
        "diffusers.models.embeddings.TextImageProjection",
        "mindone.diffusers.models.embeddings.TextImageProjection",
        (),
        {},
        (
            np.random.randn(3, 77, 1024).astype(np.float32),
            np.random.randn(3, 768).astype(np.float32),
        ),
        {},
    ],
    [
        "ImageProjection",
        "diffusers.models.embeddings.ImageProjection",
        "mindone.diffusers.models.embeddings.ImageProjection",
        (),
        {},
        (np.random.randn(3, 768).astype(np.float32),),
        {},
    ],
    [
        "CombinedTimestepLabelEmbeddings",
        "diffusers.models.embeddings.CombinedTimestepLabelEmbeddings",
        "mindone.diffusers.models.embeddings.CombinedTimestepLabelEmbeddings",
        (100, 128),
        {},
        (np.random.randint(0, 100, size=(3,)).astype(np.int32), np.random.randint(0, 100, size=(3,)).astype(np.int32)),
        {},
    ],
    [
        "TextTimeEmbedding",
        "diffusers.models.embeddings.TextTimeEmbedding",
        "mindone.diffusers.models.embeddings.TextTimeEmbedding",
        (32, 128, 8),
        {},
        (np.random.randn(3, 4, 32).astype(np.float32),),
        {},
    ],
    [
        "TextImageTimeEmbedding",
        "diffusers.models.embeddings.TextImageTimeEmbedding",
        "mindone.diffusers.models.embeddings.TextImageTimeEmbedding",
        (32, 24, 64),
        {},
        (
            np.random.randn(3, 16, 32).astype(np.float32),
            np.random.randn(3, 16, 24).astype(np.float32),
        ),
        {},
    ],
    [
        "ImageTimeEmbedding",
        "diffusers.models.embeddings.ImageTimeEmbedding",
        "mindone.diffusers.models.embeddings.ImageTimeEmbedding",
        (32, 128),
        {},
        (np.random.randn(3, 16, 32).astype(np.float32),),
        {},
    ],
    [
        "ImageHintTimeEmbedding",
        "diffusers.models.embeddings.ImageHintTimeEmbedding",
        "mindone.diffusers.models.embeddings.ImageHintTimeEmbedding",
        (32, 128),
        {},
        (
            np.random.randn(3, 16, 32).astype(np.float32),
            np.random.randn(3, 3, 128, 128).astype(np.float32),
        ),
        {},
    ],
]


UPSAMPLE2D_CASES = [
    [
        "Upsample2D_default",
        "diffusers.models.upsampling.Upsample2D",
        "mindone.diffusers.models.upsampling.Upsample2D",
        (),
        dict(channels=32, use_conv=False),
        (np.random.randn(1, 32, 32, 32).astype(np.float32),),
        {},
    ],
    [
        "Upsample2D_with_conv",
        "diffusers.models.upsampling.Upsample2D",
        "mindone.diffusers.models.upsampling.Upsample2D",
        (),
        dict(channels=32, use_conv=True),
        (np.random.randn(1, 32, 32, 32).astype(np.float32),),
        {},
    ],
    [
        "Upsample2D_with_conv_out_dim",
        "diffusers.models.upsampling.Upsample2D",
        "mindone.diffusers.models.upsampling.Upsample2D",
        (),
        dict(channels=32, use_conv=True, out_channels=64),
        (np.random.randn(1, 32, 32, 32).astype(np.float32),),
        {},
    ],
    [
        "Upsample2D_with_transpose",
        "diffusers.models.upsampling.Upsample2D",
        "mindone.diffusers.models.upsampling.Upsample2D",
        (),
        dict(channels=32, use_conv=False, use_conv_transpose=True),
        (np.random.randn(1, 32, 32, 32).astype(np.float32),),
        {},
    ],
]


DOWNSAMPLE2D_CASES = [
    [
        "Downsample2D_default",
        "diffusers.models.downsampling.Downsample2D",
        "mindone.diffusers.models.downsampling.Downsample2D",
        (),
        dict(channels=32, use_conv=False),
        (np.random.randn(1, 32, 64, 64).astype(np.float32),),
        {},
    ],
    [
        "Downsample2D_with_conv",
        "diffusers.models.downsampling.Downsample2D",
        "mindone.diffusers.models.downsampling.Downsample2D",
        (),
        dict(channels=32, use_conv=True),
        (np.random.randn(1, 32, 64, 64).astype(np.float32),),
        {},
    ],
    [
        "Downsample2D_with_conv_pad1",
        "diffusers.models.downsampling.Downsample2D",
        "mindone.diffusers.models.downsampling.Downsample2D",
        (),
        dict(channels=32, use_conv=True, padding=1),
        (np.random.randn(1, 32, 64, 64).astype(np.float32),),
        {},
    ],
    [
        "Downsample2D_with_conv_out_dim",
        "diffusers.models.downsampling.Downsample2D",
        "mindone.diffusers.models.downsampling.Downsample2D",
        (),
        dict(channels=32, use_conv=True, out_channels=16),
        (np.random.randn(1, 32, 64, 64).astype(np.float32),),
        {},
    ],
]


RESNET_CASES = [
    [
        "ResnetBlock2D_default",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_with_use_in_shortcut",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "use_in_shortcut": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_up",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "up": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_down",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "down": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_down_with_kernel_fir",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "kernel": "fir", "down": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_down_with_kernel_sde_vp",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "kernel": "sde_vp", "down": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_up_with_kernel_fir",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "kernel": "fir", "up": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "ResnetBlock2D_up_with_kernel_sde_vp",
        "diffusers.models.resnet.ResnetBlock2D",
        "mindone.diffusers.models.resnet.ResnetBlock2D",
        (),
        {"in_channels": 32, "temb_channels": 128, "kernel": "sde_vp", "up": True},
        (np.random.randn(1, 32, 64, 64).astype(np.float32), np.random.randn(1, 128).astype(np.float32)),
        {},
    ],
    [
        "TemporalConvLayer",
        "diffusers.models.resnet.TemporalConvLayer",
        "mindone.diffusers.models.resnet.TemporalConvLayer",
        (),
        dict(
            in_dim=32,
            out_dim=32,
            dropout=0.1,
            norm_num_groups=8,
        ),
        (np.random.randn(24, 32, 24, 24).astype(np.float32), 1),
        {},
    ],
]


T2I_ADAPTER_CASES = [
    [
        "T2IAdapter",
        "diffusers.models.adapter.T2IAdapter",
        "mindone.diffusers.models.adapter.T2IAdapter",
        (),
        dict(
            in_channels=3,
            channels=[32, 64, 128],
            num_res_blocks=2,
            downscale_factor=2,
            adapter_type="full_adapter",
        ),
        (),
        {
            "x": np.random.randn(4, 3, 32, 32).astype(np.float32),
        },
    ],
]


CONTROL_NET_CASES = [
    [
        "ControlNetModel",
        "diffusers.models.controlnet.ControlNetModel",
        "mindone.diffusers.models.controlnet.ControlNetModel",
        (),
        dict(
            block_out_channels=(4, 8),
            layers_per_block=2,
            in_channels=4,
            down_block_types=("DownBlock2D", "CrossAttnDownBlock2D"),
            cross_attention_dim=32,
            conditioning_embedding_out_channels=(16, 32),
            norm_num_groups=1,
        ),
        (),
        {
            "sample": np.random.randn(2, 4, 32, 32).astype(np.float32),
            "timestep": np.array([10]).astype(np.int64),
            "encoder_hidden_states": np.random.randn(2, 77, 32).astype(np.float32),
            "controlnet_cond": np.random.randn(2, 3, 64, 64).astype(np.float32),
            "return_dict": False,
        },
    ],
]


# CONTROL_NET_CASES: outputs format isn't same with others
ALL_CASES = (
    NORMALIZATION_CASES + EMBEDDINGS_CASES + UPSAMPLE2D_CASES + DOWNSAMPLE2D_CASES + RESNET_CASES + T2I_ADAPTER_CASES
)
