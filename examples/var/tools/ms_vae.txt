encoder.conv_in.weight: (160, 3, 3, 3)
encoder.conv_in.bias: (160,)
encoder.down.0.block.0.norm1.weight: (160,)
encoder.down.0.block.0.norm1.bias: (160,)
encoder.down.0.block.0.conv1.weight: (160, 160, 3, 3)
encoder.down.0.block.0.conv1.bias: (160,)
encoder.down.0.block.0.norm2.weight: (160,)
encoder.down.0.block.0.norm2.bias: (160,)
encoder.down.0.block.0.conv2.weight: (160, 160, 3, 3)
encoder.down.0.block.0.conv2.bias: (160,)
encoder.down.0.block.1.norm1.weight: (160,)
encoder.down.0.block.1.norm1.bias: (160,)
encoder.down.0.block.1.conv1.weight: (160, 160, 3, 3)
encoder.down.0.block.1.conv1.bias: (160,)
encoder.down.0.block.1.norm2.weight: (160,)
encoder.down.0.block.1.norm2.bias: (160,)
encoder.down.0.block.1.conv2.weight: (160, 160, 3, 3)
encoder.down.0.block.1.conv2.bias: (160,)
encoder.down.0.downsample.conv.weight: (160, 160, 3, 3)
encoder.down.0.downsample.conv.bias: (160,)
encoder.down.1.block.0.norm1.weight: (160,)
encoder.down.1.block.0.norm1.bias: (160,)
encoder.down.1.block.0.conv1.weight: (160, 160, 3, 3)
encoder.down.1.block.0.conv1.bias: (160,)
encoder.down.1.block.0.norm2.weight: (160,)
encoder.down.1.block.0.norm2.bias: (160,)
encoder.down.1.block.0.conv2.weight: (160, 160, 3, 3)
encoder.down.1.block.0.conv2.bias: (160,)
encoder.down.1.block.1.norm1.weight: (160,)
encoder.down.1.block.1.norm1.bias: (160,)
encoder.down.1.block.1.conv1.weight: (160, 160, 3, 3)
encoder.down.1.block.1.conv1.bias: (160,)
encoder.down.1.block.1.norm2.weight: (160,)
encoder.down.1.block.1.norm2.bias: (160,)
encoder.down.1.block.1.conv2.weight: (160, 160, 3, 3)
encoder.down.1.block.1.conv2.bias: (160,)
encoder.down.1.downsample.conv.weight: (160, 160, 3, 3)
encoder.down.1.downsample.conv.bias: (160,)
encoder.down.2.block.0.norm1.weight: (160,)
encoder.down.2.block.0.norm1.bias: (160,)
encoder.down.2.block.0.conv1.weight: (320, 160, 3, 3)
encoder.down.2.block.0.conv1.bias: (320,)
encoder.down.2.block.0.norm2.weight: (320,)
encoder.down.2.block.0.norm2.bias: (320,)
encoder.down.2.block.0.conv2.weight: (320, 320, 3, 3)
encoder.down.2.block.0.conv2.bias: (320,)
encoder.down.2.block.0.nin_shortcut.weight: (320, 160, 1, 1)
encoder.down.2.block.0.nin_shortcut.bias: (320,)
encoder.down.2.block.1.norm1.weight: (320,)
encoder.down.2.block.1.norm1.bias: (320,)
encoder.down.2.block.1.conv1.weight: (320, 320, 3, 3)
encoder.down.2.block.1.conv1.bias: (320,)
encoder.down.2.block.1.norm2.weight: (320,)
encoder.down.2.block.1.norm2.bias: (320,)
encoder.down.2.block.1.conv2.weight: (320, 320, 3, 3)
encoder.down.2.block.1.conv2.bias: (320,)
encoder.down.2.downsample.conv.weight: (320, 320, 3, 3)
encoder.down.2.downsample.conv.bias: (320,)
encoder.down.3.block.0.norm1.weight: (320,)
encoder.down.3.block.0.norm1.bias: (320,)
encoder.down.3.block.0.conv1.weight: (320, 320, 3, 3)
encoder.down.3.block.0.conv1.bias: (320,)
encoder.down.3.block.0.norm2.weight: (320,)
encoder.down.3.block.0.norm2.bias: (320,)
encoder.down.3.block.0.conv2.weight: (320, 320, 3, 3)
encoder.down.3.block.0.conv2.bias: (320,)
encoder.down.3.block.1.norm1.weight: (320,)
encoder.down.3.block.1.norm1.bias: (320,)
encoder.down.3.block.1.conv1.weight: (320, 320, 3, 3)
encoder.down.3.block.1.conv1.bias: (320,)
encoder.down.3.block.1.norm2.weight: (320,)
encoder.down.3.block.1.norm2.bias: (320,)
encoder.down.3.block.1.conv2.weight: (320, 320, 3, 3)
encoder.down.3.block.1.conv2.bias: (320,)
encoder.down.3.downsample.conv.weight: (320, 320, 3, 3)
encoder.down.3.downsample.conv.bias: (320,)
encoder.down.4.block.0.norm1.weight: (320,)
encoder.down.4.block.0.norm1.bias: (320,)
encoder.down.4.block.0.conv1.weight: (640, 320, 3, 3)
encoder.down.4.block.0.conv1.bias: (640,)
encoder.down.4.block.0.norm2.weight: (640,)
encoder.down.4.block.0.norm2.bias: (640,)
encoder.down.4.block.0.conv2.weight: (640, 640, 3, 3)
encoder.down.4.block.0.conv2.bias: (640,)
encoder.down.4.block.0.nin_shortcut.weight: (640, 320, 1, 1)
encoder.down.4.block.0.nin_shortcut.bias: (640,)
encoder.down.4.block.1.norm1.weight: (640,)
encoder.down.4.block.1.norm1.bias: (640,)
encoder.down.4.block.1.conv1.weight: (640, 640, 3, 3)
encoder.down.4.block.1.conv1.bias: (640,)
encoder.down.4.block.1.norm2.weight: (640,)
encoder.down.4.block.1.norm2.bias: (640,)
encoder.down.4.block.1.conv2.weight: (640, 640, 3, 3)
encoder.down.4.block.1.conv2.bias: (640,)
encoder.down.4.attn.0.norm.weight: (640,)
encoder.down.4.attn.0.norm.bias: (640,)
encoder.down.4.attn.0.qkv.weight: (1920, 640, 1, 1)
encoder.down.4.attn.0.qkv.bias: (1920,)
encoder.down.4.attn.0.proj_out.weight: (640, 640, 1, 1)
encoder.down.4.attn.0.proj_out.bias: (640,)
encoder.down.4.attn.1.norm.weight: (640,)
encoder.down.4.attn.1.norm.bias: (640,)
encoder.down.4.attn.1.qkv.weight: (1920, 640, 1, 1)
encoder.down.4.attn.1.qkv.bias: (1920,)
encoder.down.4.attn.1.proj_out.weight: (640, 640, 1, 1)
encoder.down.4.attn.1.proj_out.bias: (640,)
encoder.mid.block_1.norm1.weight: (640,)
encoder.mid.block_1.norm1.bias: (640,)
encoder.mid.block_1.conv1.weight: (640, 640, 3, 3)
encoder.mid.block_1.conv1.bias: (640,)
encoder.mid.block_1.norm2.weight: (640,)
encoder.mid.block_1.norm2.bias: (640,)
encoder.mid.block_1.conv2.weight: (640, 640, 3, 3)
encoder.mid.block_1.conv2.bias: (640,)
encoder.mid.attn_1.norm.weight: (640,)
encoder.mid.attn_1.norm.bias: (640,)
encoder.mid.attn_1.qkv.weight: (1920, 640, 1, 1)
encoder.mid.attn_1.qkv.bias: (1920,)
encoder.mid.attn_1.proj_out.weight: (640, 640, 1, 1)
encoder.mid.attn_1.proj_out.bias: (640,)
encoder.mid.block_2.norm1.weight: (640,)
encoder.mid.block_2.norm1.bias: (640,)
encoder.mid.block_2.conv1.weight: (640, 640, 3, 3)
encoder.mid.block_2.conv1.bias: (640,)
encoder.mid.block_2.norm2.weight: (640,)
encoder.mid.block_2.norm2.bias: (640,)
encoder.mid.block_2.conv2.weight: (640, 640, 3, 3)
encoder.mid.block_2.conv2.bias: (640,)
encoder.norm_out.weight: (640,)
encoder.norm_out.bias: (640,)
encoder.conv_out.weight: (32, 640, 3, 3)
encoder.conv_out.bias: (32,)
decoder.conv_in.weight: (640, 32, 3, 3)
decoder.conv_in.bias: (640,)
decoder.mid.block_1.norm1.weight: (640,)
decoder.mid.block_1.norm1.bias: (640,)
decoder.mid.block_1.conv1.weight: (640, 640, 3, 3)
decoder.mid.block_1.conv1.bias: (640,)
decoder.mid.block_1.norm2.weight: (640,)
decoder.mid.block_1.norm2.bias: (640,)
decoder.mid.block_1.conv2.weight: (640, 640, 3, 3)
decoder.mid.block_1.conv2.bias: (640,)
decoder.mid.attn_1.norm.weight: (640,)
decoder.mid.attn_1.norm.bias: (640,)
decoder.mid.attn_1.qkv.weight: (1920, 640, 1, 1)
decoder.mid.attn_1.qkv.bias: (1920,)
decoder.mid.attn_1.proj_out.weight: (640, 640, 1, 1)
decoder.mid.attn_1.proj_out.bias: (640,)
decoder.mid.block_2.norm1.weight: (640,)
decoder.mid.block_2.norm1.bias: (640,)
decoder.mid.block_2.conv1.weight: (640, 640, 3, 3)
decoder.mid.block_2.conv1.bias: (640,)
decoder.mid.block_2.norm2.weight: (640,)
decoder.mid.block_2.norm2.bias: (640,)
decoder.mid.block_2.conv2.weight: (640, 640, 3, 3)
decoder.mid.block_2.conv2.bias: (640,)
decoder.up.0.block.0.norm1.weight: (160,)
decoder.up.0.block.0.norm1.bias: (160,)
decoder.up.0.block.0.conv1.weight: (160, 160, 3, 3)
decoder.up.0.block.0.conv1.bias: (160,)
decoder.up.0.block.0.norm2.weight: (160,)
decoder.up.0.block.0.norm2.bias: (160,)
decoder.up.0.block.0.conv2.weight: (160, 160, 3, 3)
decoder.up.0.block.0.conv2.bias: (160,)
decoder.up.0.block.1.norm1.weight: (160,)
decoder.up.0.block.1.norm1.bias: (160,)
decoder.up.0.block.1.conv1.weight: (160, 160, 3, 3)
decoder.up.0.block.1.conv1.bias: (160,)
decoder.up.0.block.1.norm2.weight: (160,)
decoder.up.0.block.1.norm2.bias: (160,)
decoder.up.0.block.1.conv2.weight: (160, 160, 3, 3)
decoder.up.0.block.1.conv2.bias: (160,)
decoder.up.0.block.2.norm1.weight: (160,)
decoder.up.0.block.2.norm1.bias: (160,)
decoder.up.0.block.2.conv1.weight: (160, 160, 3, 3)
decoder.up.0.block.2.conv1.bias: (160,)
decoder.up.0.block.2.norm2.weight: (160,)
decoder.up.0.block.2.norm2.bias: (160,)
decoder.up.0.block.2.conv2.weight: (160, 160, 3, 3)
decoder.up.0.block.2.conv2.bias: (160,)
decoder.up.1.block.0.norm1.weight: (320,)
decoder.up.1.block.0.norm1.bias: (320,)
decoder.up.1.block.0.conv1.weight: (160, 320, 3, 3)
decoder.up.1.block.0.conv1.bias: (160,)
decoder.up.1.block.0.norm2.weight: (160,)
decoder.up.1.block.0.norm2.bias: (160,)
decoder.up.1.block.0.conv2.weight: (160, 160, 3, 3)
decoder.up.1.block.0.conv2.bias: (160,)
decoder.up.1.block.0.nin_shortcut.weight: (160, 320, 1, 1)
decoder.up.1.block.0.nin_shortcut.bias: (160,)
decoder.up.1.block.1.norm1.weight: (160,)
decoder.up.1.block.1.norm1.bias: (160,)
decoder.up.1.block.1.conv1.weight: (160, 160, 3, 3)
decoder.up.1.block.1.conv1.bias: (160,)
decoder.up.1.block.1.norm2.weight: (160,)
decoder.up.1.block.1.norm2.bias: (160,)
decoder.up.1.block.1.conv2.weight: (160, 160, 3, 3)
decoder.up.1.block.1.conv2.bias: (160,)
decoder.up.1.block.2.norm1.weight: (160,)
decoder.up.1.block.2.norm1.bias: (160,)
decoder.up.1.block.2.conv1.weight: (160, 160, 3, 3)
decoder.up.1.block.2.conv1.bias: (160,)
decoder.up.1.block.2.norm2.weight: (160,)
decoder.up.1.block.2.norm2.bias: (160,)
decoder.up.1.block.2.conv2.weight: (160, 160, 3, 3)
decoder.up.1.block.2.conv2.bias: (160,)
decoder.up.1.upsample.conv.weight: (160, 160, 3, 3)
decoder.up.1.upsample.conv.bias: (160,)
decoder.up.2.block.0.norm1.weight: (320,)
decoder.up.2.block.0.norm1.bias: (320,)
decoder.up.2.block.0.conv1.weight: (320, 320, 3, 3)
decoder.up.2.block.0.conv1.bias: (320,)
decoder.up.2.block.0.norm2.weight: (320,)
decoder.up.2.block.0.norm2.bias: (320,)
decoder.up.2.block.0.conv2.weight: (320, 320, 3, 3)
decoder.up.2.block.0.conv2.bias: (320,)
decoder.up.2.block.1.norm1.weight: (320,)
decoder.up.2.block.1.norm1.bias: (320,)
decoder.up.2.block.1.conv1.weight: (320, 320, 3, 3)
decoder.up.2.block.1.conv1.bias: (320,)
decoder.up.2.block.1.norm2.weight: (320,)
decoder.up.2.block.1.norm2.bias: (320,)
decoder.up.2.block.1.conv2.weight: (320, 320, 3, 3)
decoder.up.2.block.1.conv2.bias: (320,)
decoder.up.2.block.2.norm1.weight: (320,)
decoder.up.2.block.2.norm1.bias: (320,)
decoder.up.2.block.2.conv1.weight: (320, 320, 3, 3)
decoder.up.2.block.2.conv1.bias: (320,)
decoder.up.2.block.2.norm2.weight: (320,)
decoder.up.2.block.2.norm2.bias: (320,)
decoder.up.2.block.2.conv2.weight: (320, 320, 3, 3)
decoder.up.2.block.2.conv2.bias: (320,)
decoder.up.2.upsample.conv.weight: (320, 320, 3, 3)
decoder.up.2.upsample.conv.bias: (320,)
decoder.up.3.block.0.norm1.weight: (640,)
decoder.up.3.block.0.norm1.bias: (640,)
decoder.up.3.block.0.conv1.weight: (320, 640, 3, 3)
decoder.up.3.block.0.conv1.bias: (320,)
decoder.up.3.block.0.norm2.weight: (320,)
decoder.up.3.block.0.norm2.bias: (320,)
decoder.up.3.block.0.conv2.weight: (320, 320, 3, 3)
decoder.up.3.block.0.conv2.bias: (320,)
decoder.up.3.block.0.nin_shortcut.weight: (320, 640, 1, 1)
decoder.up.3.block.0.nin_shortcut.bias: (320,)
decoder.up.3.block.1.norm1.weight: (320,)
decoder.up.3.block.1.norm1.bias: (320,)
decoder.up.3.block.1.conv1.weight: (320, 320, 3, 3)
decoder.up.3.block.1.conv1.bias: (320,)
decoder.up.3.block.1.norm2.weight: (320,)
decoder.up.3.block.1.norm2.bias: (320,)
decoder.up.3.block.1.conv2.weight: (320, 320, 3, 3)
decoder.up.3.block.1.conv2.bias: (320,)
decoder.up.3.block.2.norm1.weight: (320,)
decoder.up.3.block.2.norm1.bias: (320,)
decoder.up.3.block.2.conv1.weight: (320, 320, 3, 3)
decoder.up.3.block.2.conv1.bias: (320,)
decoder.up.3.block.2.norm2.weight: (320,)
decoder.up.3.block.2.norm2.bias: (320,)
decoder.up.3.block.2.conv2.weight: (320, 320, 3, 3)
decoder.up.3.block.2.conv2.bias: (320,)
decoder.up.3.upsample.conv.weight: (320, 320, 3, 3)
decoder.up.3.upsample.conv.bias: (320,)
decoder.up.4.block.0.norm1.weight: (640,)
decoder.up.4.block.0.norm1.bias: (640,)
decoder.up.4.block.0.conv1.weight: (640, 640, 3, 3)
decoder.up.4.block.0.conv1.bias: (640,)
decoder.up.4.block.0.norm2.weight: (640,)
decoder.up.4.block.0.norm2.bias: (640,)
decoder.up.4.block.0.conv2.weight: (640, 640, 3, 3)
decoder.up.4.block.0.conv2.bias: (640,)
decoder.up.4.block.1.norm1.weight: (640,)
decoder.up.4.block.1.norm1.bias: (640,)
decoder.up.4.block.1.conv1.weight: (640, 640, 3, 3)
decoder.up.4.block.1.conv1.bias: (640,)
decoder.up.4.block.1.norm2.weight: (640,)
decoder.up.4.block.1.norm2.bias: (640,)
decoder.up.4.block.1.conv2.weight: (640, 640, 3, 3)
decoder.up.4.block.1.conv2.bias: (640,)
decoder.up.4.block.2.norm1.weight: (640,)
decoder.up.4.block.2.norm1.bias: (640,)
decoder.up.4.block.2.conv1.weight: (640, 640, 3, 3)
decoder.up.4.block.2.conv1.bias: (640,)
decoder.up.4.block.2.norm2.weight: (640,)
decoder.up.4.block.2.norm2.bias: (640,)
decoder.up.4.block.2.conv2.weight: (640, 640, 3, 3)
decoder.up.4.block.2.conv2.bias: (640,)
decoder.up.4.attn.0.norm.weight: (640,)
decoder.up.4.attn.0.norm.bias: (640,)
decoder.up.4.attn.0.qkv.weight: (1920, 640, 1, 1)
decoder.up.4.attn.0.qkv.bias: (1920,)
decoder.up.4.attn.0.proj_out.weight: (640, 640, 1, 1)
decoder.up.4.attn.0.proj_out.bias: (640,)
decoder.up.4.attn.1.norm.weight: (640,)
decoder.up.4.attn.1.norm.bias: (640,)
decoder.up.4.attn.1.qkv.weight: (1920, 640, 1, 1)
decoder.up.4.attn.1.qkv.bias: (1920,)
decoder.up.4.attn.1.proj_out.weight: (640, 640, 1, 1)
decoder.up.4.attn.1.proj_out.bias: (640,)
decoder.up.4.attn.2.norm.weight: (640,)
decoder.up.4.attn.2.norm.bias: (640,)
decoder.up.4.attn.2.qkv.weight: (1920, 640, 1, 1)
decoder.up.4.attn.2.qkv.bias: (1920,)
decoder.up.4.attn.2.proj_out.weight: (640, 640, 1, 1)
decoder.up.4.attn.2.proj_out.bias: (640,)
decoder.up.4.upsample.conv.weight: (640, 640, 3, 3)
decoder.up.4.upsample.conv.bias: (640,)
decoder.norm_out.weight: (160,)
decoder.norm_out.bias: (160,)
decoder.conv_out.weight: (3, 160, 3, 3)
decoder.conv_out.bias: (3,)
quantize.ema_vocab_hit_SV: (10, 4096)
quantize.quant_resi.qresi_ls.0.weight: (32, 32, 3, 3)
quantize.quant_resi.qresi_ls.0.bias: (32,)
quantize.quant_resi.qresi_ls.1.weight: (32, 32, 3, 3)
quantize.quant_resi.qresi_ls.1.bias: (32,)
quantize.quant_resi.qresi_ls.2.weight: (32, 32, 3, 3)
quantize.quant_resi.qresi_ls.2.bias: (32,)
quantize.quant_resi.qresi_ls.3.weight: (32, 32, 3, 3)
quantize.quant_resi.qresi_ls.3.bias: (32,)
quantize.embedding.weight: (4096, 32)
quant_conv.weight: (32, 32, 3, 3)
quant_conv.bias: (32,)
post_quant_conv.weight: (32, 32, 3, 3)
post_quant_conv.bias: (32,)
